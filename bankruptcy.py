# -*- coding: utf-8 -*-
"""bankruptcy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDMekHpLU9KPHcdWkq_tXDt9n93hVcdO
"""

import numpy as np #importing the numerical python to perform the required numerical steps
import streamlit as st # streamlit library
import pickle# pickle library to read the model
import warnings# to ignore warnings
warnings.filterwarnings("ignore")

# User Interface
st.set_page_config(page_title="Bankruptcy classification", page_icon=':bank:', layout='centered')# to name the tab where the application opens
#st.markdown("""<style>.stApp {background-color: #808080;} </style>""", unsafe_allow_html=True) # This can be used to change the background color of the streamLit web app
st.title(" ________________________________ Bankruptcy classification :Bank:") # giving title for the page inside it
st.markdown('<style>div.block-container{padding-top:1rem;}</style>', unsafe_allow_html=True)

#inputs
ROA_A = st.number_input('ROA(A) before interest and % after tax',min_value = 0.0,max_value = 1.0,value = 0.000000,format ="%.6f")
st.write(f"value before interest and %  afetr tax")
ROA_B = st.number_input('ROA(B) before interest and depreciation after tax',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"value before interest and depreciation after tax")
ROA_C = st.number_input('ROA(C) before interest and depreciation before interest',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"value before interest and depreciation before interest")
EPS = st.number_input('persistent EPS in the last four seasons',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"value of the EPS for the last four seasons")
Net_profit_share=st.number_input('Per share Net profit before tax(Yuan ¥)',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"the value of per share net profit before tax(in Yuan ¥)")
debt_ratio=st.number_input('Debt Ratio %',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write("the debt ratio")
net_worth=st.number_input('Net worth/Assets',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"the net wroth or net assets")
net_profit=st.number_input('Net profit before tax/paid-in capital',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write("the net profit before tax paid in  capital")
retained_earnings=st.number_input('Retained Earnings to Total Assets',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write("the retained earnings to total assets ")
net_income=st.number_input('Net Income to Total Assets',min_value=0.0,max_value=1.0,value=0.000000,format="%.6f")
st.write(f"the net income of total assets")

#load models
model1=pickle.load(open('model1.pkl','rb'))
#model2=pickle.load(open('model2(1).pkl','rb'))
model3=pickle.load(open('model3.pkl','rb'))

#banruptcy classification
def bankruptcy_classification(input_data):
  input_array=np.asarray(input_data).reshape(1,-1)

  classification=model1.predict(input_array)
  

  if (classification==0):
    return 'the bank is not in the risk of bankruptcy'
  else:
    return 'the bank is in the risk of bankruptcy'

# finding out the risk percent
  pred1=model1.predict_proba(input_data)
  risk.append(pred1[0])

  risk_precent=print(round(risk)*100,2)

  if (classification==0):
    return f'the probability of bank is not in the risk of bankruptcy is {risk_perent}'
  else:
    return f'the probability of the bank is in the risk of bankruptcy is {risk_percent}'


#create input data for classification
input_data= [ROA_C,ROA_A,ROA_B,EPS,Net_profit_share,debt_ratio,net_worth,net_profit,retained_earnings,net_income]

#classification
if st.button("Bankruptcy"):
  result=bankruptcy_classification(input_data)
  st.write(result)
